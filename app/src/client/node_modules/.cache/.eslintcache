[{"/home/archon/Development/hotsauce-inventory/app/src/client/src/index.js":"1","/home/archon/Development/hotsauce-inventory/app/src/client/src/app/index.js":"2","/home/archon/Development/hotsauce-inventory/app/src/client/src/style/index.js":"3","/home/archon/Development/hotsauce-inventory/app/src/client/src/components/index.js":"4","/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/index.js":"5","/home/archon/Development/hotsauce-inventory/app/src/client/src/components/NavBar.jsx":"6","/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchInsert.jsx":"7","/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchesList.jsx":"8","/home/archon/Development/hotsauce-inventory/app/src/client/src/components/Links.jsx":"9","/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchUpdate.jsx":"10","/home/archon/Development/hotsauce-inventory/app/src/client/src/components/Logo.jsx":"11","/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchesHome.jsx":"12","/home/archon/Development/hotsauce-inventory/app/src/client/src/components/IngredientTable.js":"13","/home/archon/Development/hotsauce-inventory/app/src/client/src/api/index.js":"14","/home/archon/Development/hotsauce-inventory/app/src/client/src/components/IngredientAutoSuggest.jsx":"15"},{"size":141,"mtime":1617218595031,"results":"16","hashOfConfig":"17"},{"size":838,"mtime":1617218595031,"results":"18","hashOfConfig":"17"},{"size":105,"mtime":1617225931402,"results":"19","hashOfConfig":"17"},{"size":115,"mtime":1617218595031,"results":"20","hashOfConfig":"17"},{"size":223,"mtime":1617218595031,"results":"21","hashOfConfig":"17"},{"size":591,"mtime":1617218595031,"results":"22","hashOfConfig":"17"},{"size":5347,"mtime":1617233909163,"results":"23","hashOfConfig":"17"},{"size":4086,"mtime":1617234843193,"results":"24","hashOfConfig":"17"},{"size":961,"mtime":1617218595031,"results":"25","hashOfConfig":"17"},{"size":5663,"mtime":1617233672341,"results":"26","hashOfConfig":"17"},{"size":436,"mtime":1617219693802,"results":"27","hashOfConfig":"17"},{"size":983,"mtime":1617218595031,"results":"28","hashOfConfig":"17"},{"size":3263,"mtime":1617235033655,"results":"29","hashOfConfig":"17"},{"size":843,"mtime":1617227860170,"results":"30","hashOfConfig":"17"},{"size":2852,"mtime":1617235633686,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1y2op1n",{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/archon/Development/hotsauce-inventory/app/src/client/src/index.js",[],"/home/archon/Development/hotsauce-inventory/app/src/client/src/app/index.js",[],"/home/archon/Development/hotsauce-inventory/app/src/client/src/style/index.js",[],"/home/archon/Development/hotsauce-inventory/app/src/client/src/components/index.js",[],"/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/index.js",[],"/home/archon/Development/hotsauce-inventory/app/src/client/src/components/NavBar.jsx",[],"/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchInsert.jsx",["67","68","69","70"],"import React, { Component } from 'react'\nimport DateInput from 'react-input-date'\nimport api from '../api'\nimport moment from 'moment';\nimport Collapsible from 'react-collapsible';\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport ReactSlider from 'react-slider'\n\nimport styled from 'styled-components'\nimport IngredientTable from '../components/IngredientTable';\n\nconst Title = styled.h2.attrs({\n    className: 'h2',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst CancelButton = styled.a.attrs({\n    className: `btn btn-danger`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst StyledSlider = styled(ReactSlider)`\n    width: 100%;\n    height: 25px;\n`;\n\nconst StyledThumb = styled.div`\n    height: 25px;\n    line-height: 25px;\n    width: 25px;\n    text-align: center;\n    background-color: #000;\n    color: #fff;\n    border-radius: 50%;\n    cursor: grab;\n`;\n\nconst Thumb = (props, state) => <StyledThumb {...props}>{state.valueNow}</StyledThumb>;\n\nconst StyledTrack = styled.div`\n    top: 0;\n    bottom: 0;\n    background: ${props => props.index === 2 ? '#ff0000' : props.index === 1 ? '#ff0000' : '#ff0000'};\n    border-radius: 999px;\n`;\n\nconst Track = (props, state) => <StyledTrack {...props} index={state.index} />;\n\nclass BatchInsert extends Component {\n    constructor(props) {\n        super(props)\n\n        var now = new Date();\n\t\tvar dateString = moment(now).format('DD-MM-YYYY');\n\n        this.state = {\n            name: '',\n            date: dateString,\n            ingredients: [],\n            heat: 0\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n    handleChangeInputDate = (newDate) => {\n        this.setState({ date: newDate })\n    }\n\n    handleChangeIngredients = async ingredientsList => {\n        this.setState({ ingredients: ingredientsList })\n    }\n\n    handleChangeHeat = async newHeat => {\n        this.setState({ heat: newHeat })\n    }\n\n    handleIncludeBatch = async () => {\n        const { name, date, ingredients, heat } = this.state\n        const payload = { name, date, ingredients, heat }\n\n        await api.insertBatch(payload).then(res => {\n            window.location.reload();\n        })\n\n        ingredients.forEach(async function(iPayload) {\n            api.insertIngredient(iPayload).then(res => {})\n        })\n    }\n\n    handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            this.handleIncludeBatch()\n        }\n    }\n\n    render() {\n        const { name, date } = this.state\n        return (\n            <Wrapper>\n                <Collapsible trigger=\"Create Batch\">\n                    <Grid>\n                        <h5>Batch Information</h5>\n                        <Row>\n                            <Col xs={5} >\n                                <InputText\n                                    type=\"text\"\n                                    placeholder=\"Batch name\"\n                                    value={name}\n                                    onChange={this.handleChangeInputName}\n                                    onKeyDown={this.handleKeyDown}\n                                />\n                            </Col>\n                            <Col xs={5} xsOffset={2} >\n                                <DateInput\n                                    date={date}\n                                    format='DDMMYYYY'\n                                    separator='-'\n                                    onChange={this.handleChangeInputDate}\n                                />\n                            </Col>\n                        </Row>\n                        <p></p>\n                        <h5>Heat (Mild &lt;-&gt; Spicy)</h5>\n                        <Row>                            \n                            <Col xs={5} >\n                                <ReactSlider\n                                    className=\"horizontal-slider\"\n                                    onChange={this.handleChangeHeat}\n                                    renderTrack={Track}\n                                    renderThumb={Thumb}\n                                />\n                            </Col>\n                        </Row>\n                    </Grid>\n\n                    <Grid>\n                        <p></p>\n                        <h5>Ingredients</h5>\n                        <Row>\n                            <Col xs={6} >\n                                <IngredientTable onIngredientsChange={this.handleChangeIngredients}/>\n                            </Col>\n                        </Row>                        \n                    </Grid>\n                    \n                    <Grid>\n                        <Row>\n                        <Col xs={2} >\n                            <Button onClick={this.handleIncludeBatch} >Create</Button>\n                        </Col>\n                        </Row>\n                    </Grid>\n\n                </Collapsible>\n\n                <p></p>\n\n            </Wrapper>\n        )\n    }\n}\n\nexport default BatchInsert","/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchesList.jsx",["71"],"import React, { Component } from 'react'\nimport api from '../api'\nimport moment from 'moment';\n\nimport ReactTable from \"react-table-6\"\nimport \"react-table-6/react-table.css\"\n\nimport styled from 'styled-components'\n\nconst Wrapper = styled.div`\n    padding: 0 40px 40px 40px;\n`\n\nconst BlockSpan = styled.span`\n    display: block;\n`\n\nconst Update = styled.div`\n    float: left;\n    color: #ef9b0f;\n    cursor: pointer;\n    padding-left: 10pt;\n`\n\nconst Print = styled.div`\n    float: left;\n    color: #34a1eb;\n    cursor: pointer;\n    padding-left: 10pt;\n`\n\nconst Delete = styled.div`\n    float: left;\n    color: #ff0000;\n    cursor: pointer;\n    padding-left: 10pt;\n`\n\nclass PrintBatchLabel extends Component {\n    printUser = event => {\n        event.preventDefault()\n\n        const copies = prompt('Print how many copies?', \"1\")\n        if(copies != null){\n            const copiesInt = parseInt(copies);\n\n            var payload = { copies: copiesInt }\n            \n            api.printBatchById(this.props.id, payload).then(res => {\n                console.log(\"Printing...\")\n            })\n        }        \n    }\n\n    render() {\n        return <Print onClick={this.printUser}>🖨️</Print>\n    }\n}\n\nclass UpdateBatch extends Component {\n    updateUser = event => {\n        event.preventDefault()\n\n        window.location.href = `/batches/update/${this.props.id}`\n    }\n\n    render() {\n        return <Update onClick={this.updateUser}>✏</Update>\n    }\n}\n\nclass DeleteBatch extends Component {\n    deleteUser = event => {\n        event.preventDefault()\n\n        if (\n            window.confirm(\n                `Do tou want to delete the batch ${this.props.name} permanently?`,\n            )\n        ) {\n            api.deleteBatchById(this.props.id)\n            window.location.reload()\n        }\n    }\n\n    render() {\n        return <Delete onClick={this.deleteUser}>💣</Delete>\n    }\n}\n\nclass BatchesList extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            batches: [],\n            columns: [],\n            isLoading: false,\n        }\n    }\n\n    componentDidMount = async () => {\n        this.setState({ isLoading: true })\n\n        await api.getAllBatches().then(batches => {\n            this.setState({\n                batches: batches.data.data,\n                isLoading: false,\n            })\n        })\n    }\n\n    render() {\n        const { batches, isLoading } = this.state\n        console.log('TCL: BatchesList -> render -> batches', batches)\n\n        const columns = [\n            {\n                Header: 'Name',\n                accessor: 'name',\n                filterable: true,\n                Cell: ({ value }) => <div style={{ textAlign: \"center\" }}>{value}</div>\n            },\n            {\n                Header: 'Date',\n                accessor: 'date',\n                filterable: false,\n                Cell: ({ value }) => <div style={{ textAlign: \"center\" }}>{moment(value).format('ll')}</div>\n            },\n            {\n                Header: 'Actions',\n                accessor: '',\n                Cell: function(props) {\n                    return (\n                        <div style={{ float: \"right\" }}>\n                            <DeleteBatch id={props.original._id} />\n                            <UpdateBatch id={props.original._id} />\n                            <PrintBatchLabel id={props.original._id} />\n                        </div>\n                    )\n                },\n            },\n        ]\n\n        let showTable = true\n        if (batches && !batches.length) {\n            showTable = false\n        }\n\n        return (\n            <Wrapper>\n                {showTable && (\n                    <ReactTable\n                        data={batches}\n                        columns={columns}\n                        loading={isLoading}\n                        defaultPageSize={10}\n                        showPageSizeOptions={true}\n                        minRows={0}\n                    />\n                )}\n            </Wrapper>\n        )\n    }\n}\n\nexport default BatchesList","/home/archon/Development/hotsauce-inventory/app/src/client/src/components/Links.jsx",[],"/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchUpdate.jsx",["72","73","74"],"import React, { Component } from 'react'\nimport DateInput from 'react-input-date'\nimport api from '../api'\nimport moment from 'moment';\nimport Collapsible from 'react-collapsible';\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport ReactSlider from 'react-slider'\n\nimport styled from 'styled-components'\nimport IngredientTable from '../components/IngredientTable';\n\nconst Title = styled.h2.attrs({\n    className: 'h2',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst CancelButton = styled.a.attrs({\n    className: `btn btn-danger`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst StyledSlider = styled(ReactSlider)`\n    width: 100%;\n    height: 25px;\n`;\n\nconst StyledThumb = styled.div`\n    height: 25px;\n    line-height: 25px;\n    width: 25px;\n    text-align: center;\n    background-color: #000;\n    color: #fff;\n    border-radius: 50%;\n    cursor: grab;\n`;\n\nconst Thumb = (props, state) => <StyledThumb {...props}>{state.valueNow}</StyledThumb>;\n\nconst StyledTrack = styled.div`\n    top: 0;\n    bottom: 0;\n    background: ${props => props.index === 2 ? '#ff0000' : props.index === 1 ? '#ff0000' : '#ff0000'};\n    border-radius: 999px;\n`;\n\nconst Track = (props, state) => <StyledTrack {...props} index={state.index} />;\n\nclass BatchUpdate extends Component {\n    constructor(props) {\n        super(props)\n\n        var now = new Date();\n\t\tvar dateString = moment(now).format('DD-MM-YYYY');\n\n        this.state = {\n            id: this.props.match.params.id,\n            name: '',\n            date: dateString,\n            heat: 0,\n            ingredients: []\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n    handleChangeInputDate = (newDate) => {\n        this.setState({ date: newDate })\n    }\n\n    handleChangeIngredients = async ingredientsList => {\n        debugger;\n        this.setState({ ingredients: ingredientsList })\n    }\n\n    handleChangeHeat = async newHeat => {\n        this.setState({ heat: newHeat })\n    }\n\n    handleCancel = async () => {\n        window.location = '/batches'\n    }\n\n    handleUpdateBatch = async () => {\n        const { id, name, date, ingredients, heat} = this.state\n        var payload = { name, date, ingredients, heat }        \n\n        await api.updateBatchById(id, payload).then(res => {\n            window.location = '/batches'\n        })\n    }\n\n    componentDidMount = async () => {\n        const { id } = this.state\n        const batch = await api.getBatchById(id)\n\n        var now = new Date();\n\t\tvar dateString = moment(now).format('DD-MM-YYYY');\n\n        this.setState({\n            name: batch.data.data.name,\n            date: dateString,\n            heat: batch.data.data.heat,\n            ingredients: batch.data.data.ingredients,\n        })\n    }\n\n    render() {\n        const { name, date, heat } = this.state\n        return (\n            <Wrapper>  \n                <Title>Edit Batch</Title>              \n                <Grid>\n                    <h5>Batch Information</h5>\n                    <Row>\n                        <Col xs={5} >\n                            <InputText\n                                type=\"text\"\n                                placeholder=\"Batch name\"\n                                value={name}\n                                onChange={this.handleChangeInputName}\n                                onKeyDown={this.handleKeyDown}\n                            />\n                        </Col>\n                        <Col xs={5} xsOffset={2} >\n                            <DateInput\n                                date={date}\n                                format='DDMMYYYY'\n                                separator='-'\n                                onChange={this.handleChangeInputDate}\n                            />\n                        </Col>\n                    </Row>\n                    <p></p>\n                    <h5>Heat (Mild &lt;-&gt; Spicy)</h5>\n                    <Row>                            \n                        <Col xs={5} >\n                            <ReactSlider\n                                className=\"horizontal-slider\"\n                                value={heat}\n                                onChange={this.handleChangeHeat}\n                                renderTrack={Track}\n                                renderThumb={Thumb}\n                            />\n                        </Col>\n                    </Row>\n                </Grid>\n\n                <Grid>\n                    <p></p>\n                    <h5>Ingredients</h5>\n                    <Row>\n                        <Col xs={6} >\n                            <IngredientTable onIngredientsChange={this.handleChangeIngredients} batchId={this.state.id} />\n                        </Col>\n                    </Row>                        \n                </Grid>\n                \n                <Grid>\n                    <Row>\n                    <Col xs={2} >\n                        <Button onClick={this.handleUpdateBatch} >Save</Button>\n                    </Col>\n                    <Col xs={2}>\n                        <CancelButton onClick={this.handleCancel} >Cancel</CancelButton>\n                    </Col>\n                    </Row>\n                </Grid>\n                <p></p>\n            </Wrapper>\n        )\n    }\n}\n\nexport default BatchUpdate","/home/archon/Development/hotsauce-inventory/app/src/client/src/components/Logo.jsx",[],"/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchesHome.jsx",["75","76","77","78"],"import React, { Component } from 'react'\nimport api from '../api'\nimport DateInput from 'react-input-date'\nimport moment from 'moment';\nimport BatchesList from './BatchesList'\nimport BatchInsert from './BatchInsert'\nimport styled from 'styled-components'\n\nconst Title = styled.h2.attrs({\n    className: 'h2',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nclass BatchesHome extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {}\n    }\n\n    componentDidMount = async () => {\n        this.setState({ })\n    }\n\n    render() {\n        return (\n            <Wrapper>\n                <Title>New Batch</Title>\n                <React.Fragment>\n                    <BatchInsert />\n                <Title>Batches</Title>\n                    <BatchesList />\n                </React.Fragment>\n            </Wrapper>\n        )\n    }\n}\n\nexport default BatchesHome","/home/archon/Development/hotsauce-inventory/app/src/client/src/components/IngredientTable.js",["79","80","81","82"],"import React, { Component } from 'react'\nimport IngredientAutoSuggest from '../components/IngredientAutoSuggest'\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport api from '../api'\nimport uuid from 'react-uuid'\n\nimport styled from 'styled-components'\n\nconst Button = styled.button.attrs({\n    className: `btn btn-secondary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nclass IngredientTable extends React.Component {\n    constructor() {\n      super();\n  \n      this.state = {\n        rows: []\n      };\n    }\n\n    componentDidMount = async () => {        \n        const id = this.props.batchId\n        var batch = await api.getBatchById(id)\n        \n        //Convert _id to id\n        var batchIngredients = batch.data.data.ingredients\n        var i;\n        for(i = 0; i < batchIngredients.length; i++){\n            batchIngredients[i].id = batchIngredients[i]['_id'];\n            delete batchIngredients[i]._id;\n        }\n\n        this.setState({\n            rows: batchIngredients\n        })\n        this.props.onIngredientsChange(batchIngredients)\n    }\n\n    addRow = async event => {\n        var rows = this.state.rows\n        rows.push( { id: uuid(), ingredient: '', quantity: '' } )\n        this.setState({rows: rows})\n    }\n\n    removeRow = async event => {\n        const elementId = event.target.parentNode.id\n\n        var rows = this.state.rows\n        var matchingRow = rows.find( ({ id }) => id === elementId );\n        const index = rows.indexOf(matchingRow);\n        if (index > -1) {\n            rows.splice(index, 1);\n        }\n      \n        this.setState({rows: rows})\n        this.props.onIngredientsChange(rows)\n    }\n\n    handleChangeIngredientName = async (event, newIngredient, ingredientId) => {\n        var rows = this.state.rows\n        var matchingRow = rows.find( ({ id }) => id === ingredientId );\n        if(matchingRow){\n            matchingRow.ingredient = newIngredient\n        }\n        this.setState({rows: rows})\n        this.props.onIngredientsChange(rows)\n    }\n\n    handleChangeIngredientQuantity = async (event) => {\n        const elementId = event.target.parentNode.id\n\n        var rows = this.state.rows\n        var matchingRow = rows.find( ({ id }) => id === elementId );\n        matchingRow.quantity = event.target.value\n\n        this.setState({rows: rows})\n        this.props.onIngredientsChange(rows)\n    }\n  \n    render() {\n        return (\n            <div>\n                <table>\n                    {this.state.rows.map((r) => (\n                      <tr>\n                          <td id={r.id}> <IngredientAutoSuggest id={r.id} value={r.ingredient} onIngredientChange={this.handleChangeIngredientName}/> </td>\n                          <td id={r.id}> <InputText id={r.id} type=\"text\" value={r.quantity} placeholder='Qty' onChange={this.handleChangeIngredientQuantity}></InputText> </td>\n                          <td id={r.id}> <button class=\"btn\" onClick={this.removeRow}>💣</button> </td>\n                      </tr>\n                    ))}\n                </table>\n                <Button onClick={this.addRow} >Add Ingredient</Button>\n            </div>\n        );\n    }\n  }\n\nexport default IngredientTable","/home/archon/Development/hotsauce-inventory/app/src/client/src/api/index.js",[],"/home/archon/Development/hotsauce-inventory/app/src/client/src/components/IngredientAutoSuggest.jsx",[],{"ruleId":"83","severity":1,"message":"84","line":12,"column":7,"nodeType":"85","messageId":"86","endLine":12,"endColumn":12},{"ruleId":"83","severity":1,"message":"87","line":22,"column":7,"nodeType":"85","messageId":"86","endLine":22,"endColumn":12},{"ruleId":"83","severity":1,"message":"88","line":38,"column":7,"nodeType":"85","messageId":"86","endLine":38,"endColumn":19},{"ruleId":"83","severity":1,"message":"89","line":44,"column":7,"nodeType":"85","messageId":"86","endLine":44,"endColumn":19},{"ruleId":"83","severity":1,"message":"90","line":14,"column":7,"nodeType":"85","messageId":"86","endLine":14,"endColumn":16},{"ruleId":"83","severity":1,"message":"91","line":5,"column":8,"nodeType":"85","messageId":"86","endLine":5,"endColumn":19},{"ruleId":"83","severity":1,"message":"87","line":22,"column":7,"nodeType":"85","messageId":"86","endLine":22,"endColumn":12},{"ruleId":"83","severity":1,"message":"89","line":44,"column":7,"nodeType":"85","messageId":"86","endLine":44,"endColumn":19},{"ruleId":"83","severity":1,"message":"92","line":2,"column":8,"nodeType":"85","messageId":"86","endLine":2,"endColumn":11},{"ruleId":"83","severity":1,"message":"93","line":3,"column":8,"nodeType":"85","messageId":"86","endLine":3,"endColumn":17},{"ruleId":"83","severity":1,"message":"94","line":4,"column":8,"nodeType":"85","messageId":"86","endLine":4,"endColumn":14},{"ruleId":"83","severity":1,"message":"87","line":19,"column":7,"nodeType":"85","messageId":"86","endLine":19,"endColumn":12},{"ruleId":"83","severity":1,"message":"95","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":26},{"ruleId":"83","severity":1,"message":"96","line":3,"column":10,"nodeType":"85","messageId":"86","endLine":3,"endColumn":14},{"ruleId":"83","severity":1,"message":"97","line":3,"column":16,"nodeType":"85","messageId":"86","endLine":3,"endColumn":19},{"ruleId":"83","severity":1,"message":"98","line":3,"column":21,"nodeType":"85","messageId":"86","endLine":3,"endColumn":24},"no-unused-vars","'Title' is assigned a value but never used.","Identifier","unusedVar","'Label' is assigned a value but never used.","'CancelButton' is assigned a value but never used.","'StyledSlider' is assigned a value but never used.","'BlockSpan' is assigned a value but never used.","'Collapsible' is defined but never used.","'api' is defined but never used.","'DateInput' is defined but never used.","'moment' is defined but never used.","'Component' is defined but never used.","'Grid' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used."]