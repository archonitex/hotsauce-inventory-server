{"ast":null,"code":"var _jsxFileName = \"/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchInsert.jsx\";\nimport React, { Component } from 'react';\nimport DateInput from 'react-input-date';\nimport api from '../api';\nimport Moment from 'react-moment';\nimport moment from 'moment';\nimport Collapsible from 'react-collapsible';\nimport IngreditTable from '../components/IngredientTable';\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport styled from 'styled-components';\nimport IngredientTable from '../components/IngredientTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Title = styled.h2.attrs({\n  className: 'h2'\n})``;\nconst Wrapper = styled.div.attrs({\n  className: 'form-group'\n})`\n    margin: 0 30px;\n`;\n_c = Wrapper;\nconst Label = styled.label`\n    margin: 5px;\n`;\nconst InputText = styled.input.attrs({\n  className: 'form-control'\n})`\n    margin: 5px;\n`;\n_c2 = InputText;\nconst Button = styled.button.attrs({\n  className: `btn btn-primary`\n})`\n    margin: 15px 15px 15px 5px;\n`;\n_c3 = Button;\nconst CancelButton = styled.a.attrs({\n  className: `btn btn-danger`\n})`\n    margin: 15px 15px 15px 5px;\n`;\n\nclass BatchInsert extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeInputName = async event => {\n      const name = event.target.value;\n      this.setState({\n        name\n      });\n    };\n\n    this.handleChangeInputDate = newDate => {\n      this.setState({\n        date: newDate\n      });\n    };\n\n    this.handleChangeIngredients = async ingredientsList => {\n      this.setState({\n        ingredients: ingredientsList\n      });\n    };\n\n    this.handleIncludeBatch = async () => {\n      const {\n        name,\n        date,\n        ingredients\n      } = this.state;\n      const payload = {\n        name,\n        date,\n        ingredients\n      };\n      await api.insertBatch(payload).then(res => {\n        window.location.reload();\n      }); //Insert Ingredients. API filters what is needed or not\n\n      var ingredientsPayload = ingredients.map(ingredient => ({\n        name: ingredient.ingredient\n      }));\n      ingredientsPayload.forEach(async function (iPayload) {\n        api.insertIngredient(iPayload).then(res => {});\n      });\n    };\n\n    this.handleKeyDown = e => {\n      if (e.key === 'Enter') {\n        this.handleIncludeBatch();\n      }\n    };\n\n    var now = new Date();\n    var dateString = moment(now).format('DD-MM-YYYY');\n    this.state = {\n      name: '',\n      date: dateString,\n      ingredients: []\n    };\n  }\n\n  render() {\n    const {\n      name,\n      date\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Collapsible, {\n        trigger: \"Create Batch\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \"Batch Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: 5,\n              children: /*#__PURE__*/_jsxDEV(InputText, {\n                type: \"text\",\n                placeholder: \"Batch name\",\n                value: name,\n                onChange: this.handleChangeInputName,\n                onKeyDown: this.handleKeyDown\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 5,\n              xsOffset: 2,\n              children: /*#__PURE__*/_jsxDEV(DateInput, {\n                date: date,\n                format: \"DDMMYYYY\",\n                separator: \"-\",\n                onChange: this.handleChangeInputDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: \"Ingredients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(IngredientTable, {\n            onIngredientsChange: this.handleChangeIngredients\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              xs: 2,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: this.handleIncludeBatch,\n                children: \"Create\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BatchInsert;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"InputText\");\n$RefreshReg$(_c3, \"Button\");","map":{"version":3,"sources":["/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchInsert.jsx"],"names":["React","Component","DateInput","api","Moment","moment","Collapsible","IngreditTable","Grid","Row","Col","styled","IngredientTable","Title","h2","attrs","className","Wrapper","div","Label","label","InputText","input","Button","button","CancelButton","a","BatchInsert","constructor","props","handleChangeInputName","event","name","target","value","setState","handleChangeInputDate","newDate","date","handleChangeIngredients","ingredientsList","ingredients","handleIncludeBatch","state","payload","insertBatch","then","res","window","location","reload","ingredientsPayload","map","ingredient","forEach","iPayload","insertIngredient","handleKeyDown","e","key","now","Date","dateString","format","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,QAA+B,oBAA/B;AAEA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;;AAEA,MAAMC,KAAK,GAAGF,MAAM,CAACG,EAAP,CAAUC,KAAV,CAAgB;AAC1BC,EAAAA,SAAS,EAAE;AADe,CAAhB,CAEX,EAFH;AAIA,MAAMC,OAAO,GAAGN,MAAM,CAACO,GAAP,CAAWH,KAAX,CAAiB;AAC7BC,EAAAA,SAAS,EAAE;AADkB,CAAjB,CAEb;AACH;AACA,CAJA;KAAMC,O;AAMN,MAAME,KAAK,GAAGR,MAAM,CAACS,KAAM;AAC3B;AACA,CAFA;AAIA,MAAMC,SAAS,GAAGV,MAAM,CAACW,KAAP,CAAaP,KAAb,CAAmB;AACjCC,EAAAA,SAAS,EAAE;AADsB,CAAnB,CAEf;AACH;AACA,CAJA;MAAMK,S;AAMN,MAAME,MAAM,GAAGZ,MAAM,CAACa,MAAP,CAAcT,KAAd,CAAoB;AAC/BC,EAAAA,SAAS,EAAG;AADmB,CAApB,CAEZ;AACH;AACA,CAJA;MAAMO,M;AAMN,MAAME,YAAY,GAAGd,MAAM,CAACe,CAAP,CAASX,KAAT,CAAe;AAChCC,EAAAA,SAAS,EAAG;AADoB,CAAf,CAElB;AACH;AACA,CAJA;;AAMA,MAAMW,WAAN,SAA0B1B,SAA1B,CAAoC;AAChC2B,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAanBC,qBAbmB,GAaK,MAAMC,KAAN,IAAe;AACnC,YAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA1B;AACA,WAAKC,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACH,KAhBkB;;AAAA,SAkBnBI,qBAlBmB,GAkBMC,OAAD,IAAa;AACjC,WAAKF,QAAL,CAAc;AAAEG,QAAAA,IAAI,EAAED;AAAR,OAAd;AACH,KApBkB;;AAAA,SAsBnBE,uBAtBmB,GAsBO,MAAMC,eAAN,IAAyB;AAC/C,WAAKL,QAAL,CAAc;AAAEM,QAAAA,WAAW,EAAED;AAAf,OAAd;AACH,KAxBkB;;AAAA,SA0BnBE,kBA1BmB,GA0BE,YAAY;AAC7B,YAAM;AAAEV,QAAAA,IAAF;AAAQM,QAAAA,IAAR;AAAcG,QAAAA;AAAd,UAA8B,KAAKE,KAAzC;AACA,YAAMC,OAAO,GAAG;AAAEZ,QAAAA,IAAF;AAAQM,QAAAA,IAAR;AAAcG,QAAAA;AAAd,OAAhB;AAEA,YAAMtC,GAAG,CAAC0C,WAAJ,CAAgBD,OAAhB,EAAyBE,IAAzB,CAA8BC,GAAG,IAAI;AACvCC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,OAFK,CAAN,CAJ6B,CAQ7B;;AACA,UAAIC,kBAAkB,GAAGV,WAAW,CAACW,GAAZ,CAAgBC,UAAU,KAAK;AAAErB,QAAAA,IAAI,EAAEqB,UAAU,CAACA;AAAnB,OAAL,CAA1B,CAAzB;AAEAF,MAAAA,kBAAkB,CAACG,OAAnB,CAA2B,gBAAeC,QAAf,EAAyB;AAChDpD,QAAAA,GAAG,CAACqD,gBAAJ,CAAqBD,QAArB,EAA+BT,IAA/B,CAAoCC,GAAG,IAAI,CAAE,CAA7C;AACH,OAFD;AAGH,KAxCkB;;AAAA,SA0CnBU,aA1CmB,GA0CFC,CAAD,IAAO;AACnB,UAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACnB,aAAKjB,kBAAL;AACH;AACJ,KA9CkB;;AAGf,QAAIkB,GAAG,GAAG,IAAIC,IAAJ,EAAV;AACN,QAAIC,UAAU,GAAGzD,MAAM,CAACuD,GAAD,CAAN,CAAYG,MAAZ,CAAmB,YAAnB,CAAjB;AAEM,SAAKpB,KAAL,GAAa;AACTX,MAAAA,IAAI,EAAE,EADG;AAETM,MAAAA,IAAI,EAAEwB,UAFG;AAGTrB,MAAAA,WAAW,EAAE;AAHJ,KAAb;AAKH;;AAqCDuB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEhC,MAAAA,IAAF;AAAQM,MAAAA;AAAR,QAAiB,KAAKK,KAA5B;AACA,wBACI,QAAC,OAAD;AAAA,8BACI,QAAC,WAAD;AAAa,QAAA,OAAO,EAAC,cAArB;AAAA,gCACI,QAAC,IAAD;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,GAAD;AAAA,oCACA,QAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAA,qCACI,QAAC,SAAD;AACI,gBAAA,IAAI,EAAC,MADT;AAEI,gBAAA,WAAW,EAAC,YAFhB;AAGI,gBAAA,KAAK,EAAEX,IAHX;AAII,gBAAA,QAAQ,EAAE,KAAKF,qBAJnB;AAKI,gBAAA,SAAS,EAAE,KAAK2B;AALpB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADA,eAUA,QAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAY,cAAA,QAAQ,EAAE,CAAtB;AAAA,qCACI,QAAC,SAAD;AACI,gBAAA,IAAI,EAAEnB,IADV;AAEI,gBAAA,MAAM,EAAC,UAFX;AAGI,gBAAA,SAAS,EAAC,GAHd;AAII,gBAAA,QAAQ,EAAE,KAAKF;AAJnB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBAVA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAqBI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,kBArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eA2BI,QAAC,IAAD;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,eAAD;AAAiB,YAAA,mBAAmB,EAAE,KAAKG;AAA3C;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3BJ,eAiCI,QAAC,IAAD;AAAA,iCACI,QAAC,GAAD;AAAA,mCACA,QAAC,GAAD;AAAK,cAAA,EAAE,EAAE,CAAT;AAAA,qCACI,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAE,KAAKG,kBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAjCJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eA4CI;AAAA;AAAA;AAAA;AAAA,cA5CJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAiDH;;AApG+B;;AAuGpC,eAAef,WAAf","sourcesContent":["import React, { Component } from 'react'\nimport DateInput from 'react-input-date'\nimport api from '../api'\nimport Moment from 'react-moment'\nimport moment from 'moment';\nimport Collapsible from 'react-collapsible';\nimport IngreditTable from '../components/IngredientTable'\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\n\nimport styled from 'styled-components'\nimport IngredientTable from '../components/IngredientTable';\n\nconst Title = styled.h2.attrs({\n    className: 'h2',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst CancelButton = styled.a.attrs({\n    className: `btn btn-danger`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nclass BatchInsert extends Component {\n    constructor(props) {\n        super(props)\n\n        var now = new Date();\n\t\tvar dateString = moment(now).format('DD-MM-YYYY');\n\n        this.state = {\n            name: '',\n            date: dateString,\n            ingredients: []\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n    handleChangeInputDate = (newDate) => {\n        this.setState({ date: newDate })\n    }\n\n    handleChangeIngredients = async ingredientsList => {\n        this.setState({ ingredients: ingredientsList })\n    }\n\n    handleIncludeBatch = async () => {\n        const { name, date, ingredients } = this.state\n        const payload = { name, date, ingredients }\n\n        await api.insertBatch(payload).then(res => {\n            window.location.reload();\n        })\n\n        //Insert Ingredients. API filters what is needed or not\n        var ingredientsPayload = ingredients.map(ingredient => ({ name: ingredient.ingredient }));\n\n        ingredientsPayload.forEach(async function(iPayload) {\n            api.insertIngredient(iPayload).then(res => {})\n        })\n    }\n\n    handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            this.handleIncludeBatch()\n        }\n    }\n\n    render() {\n        const { name, date } = this.state\n        return (\n            <Wrapper>\n                <Collapsible trigger=\"Create Batch\">\n                    <Grid>\n                        <h6>Batch Information</h6>\n                        <Row>\n                        <Col xs={5} >\n                            <InputText\n                                type=\"text\"\n                                placeholder=\"Batch name\"\n                                value={name}\n                                onChange={this.handleChangeInputName}\n                                onKeyDown={this.handleKeyDown}\n                            />\n                        </Col>\n                        <Col xs={5} xsOffset={2} >\n                            <DateInput\n                                date={date}\n                                format='DDMMYYYY'\n                                separator='-'\n                                onChange={this.handleChangeInputDate}\n                            />\n                        </Col>\n                        </Row>\n                        <Row>\n                            \n                        </Row>\n                    </Grid>\n\n                    <Grid>\n                        <p></p>\n                        <h6>Ingredients</h6>\n                        <IngredientTable onIngredientsChange={this.handleChangeIngredients}/>\n                    </Grid>\n                    \n                    <Grid>\n                        <Row>\n                        <Col xs={2} >\n                            <Button onClick={this.handleIncludeBatch} >Create</Button>\n                        </Col>\n                        </Row>\n                    </Grid>\n\n                </Collapsible>\n\n                <p></p>\n\n            </Wrapper>\n        )\n    }\n}\n\nexport default BatchInsert"]},"metadata":{},"sourceType":"module"}