{"ast":null,"code":"var _jsxFileName = \"/home/archon/Development/hotsauce-inventory/app/src/client/src/components/IngredientTable.js\";\nimport React, { Component } from 'react';\nimport IngredientAutoSuggest from '../components/IngredientAutoSuggest';\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport api from '../api';\nimport uuid from 'react-uuid';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = styled.button.attrs({\n  className: `btn btn-secondary`\n})`\n    margin: 15px 15px 15px 5px;\n`;\n_c = Button;\nconst InputText = styled.input.attrs({\n  className: 'form-control'\n})`\n    margin: 5px;\n`;\n_c2 = InputText;\n\nclass IngredientTable extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = async () => {\n      const id = this.props.batchId;\n      var batch = await api.getBatchById(id); //Convert object (ingredient / name swap)\n\n      var batchIngredients = batch.data.data.ingredients;\n      var i;\n\n      for (i = 0; i < batchIngredients.length; i++) {\n        batchIngredients[i].name = batchIngredients[i]['ingredient'];\n        delete batchIngredients[i].ingredient;\n      }\n\n      this.setState({\n        rows: batchIngredients\n      });\n    };\n\n    this.addRow = async event => {\n      var rows = this.state.rows;\n      rows.push({\n        id: uuid(),\n        ingredient: '',\n        quantity: ''\n      });\n      this.setState({\n        rows: rows\n      });\n    };\n\n    this.removeRow = async event => {\n      const elementId = event.target.parentNode.id;\n      var rows = this.state.rows;\n      var matchingRow = rows.find(({\n        id\n      }) => id === elementId);\n      const index = rows.indexOf(matchingRow);\n\n      if (index > -1) {\n        rows.splice(index, 1);\n      }\n\n      this.setState({\n        rows: rows\n      });\n      this.props.onIngredientsChange(rows);\n    };\n\n    this.handleChangeIngredientName = async (event, newIngredient) => {\n      const elementId = event.target.type == \"text\" ? event.target.parentNode.parentNode.id : event.target.parentNode.parentNode.parentNode.parentNode.parentNode.id;\n      var rows = this.state.rows;\n      var matchingRow = rows.find(({\n        id\n      }) => id === elementId);\n\n      if (matchingRow) {\n        matchingRow.ingredient = newIngredient;\n      }\n\n      this.setState({\n        rows: rows\n      });\n      this.props.onIngredientsChange(rows);\n    };\n\n    this.handleChangeIngredientQuantity = async event => {\n      const elementId = event.target.parentNode.id;\n      var rows = this.state.rows;\n      var matchingRow = rows.find(({\n        id\n      }) => id === elementId);\n      matchingRow.quantity = event.target.value;\n      this.setState({\n        rows: rows\n      });\n      this.props.onIngredientsChange(rows);\n    };\n\n    this.state = {\n      rows: [{\n        id: uuid(),\n        ingredient: '',\n        quantity: ''\n      }]\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        children: this.state.rows.map(r => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            id: r.id,\n            children: [\" \", /*#__PURE__*/_jsxDEV(IngredientAutoSuggest, {\n              value: r.name,\n              onIngredientChange: this.handleChangeIngredientName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 42\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            id: r.id,\n            children: [\" \", /*#__PURE__*/_jsxDEV(InputText, {\n              id: r.id,\n              type: \"text\",\n              value: r.quantity,\n              placeholder: \"Qty\",\n              onChange: this.handleChangeIngredientQuantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 42\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            id: r.id,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn\",\n              onClick: this.removeRow,\n              children: \"\\uD83D\\uDCA3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 42\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 23\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.addRow,\n        children: \"Add Ingredient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default IngredientTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"InputText\");","map":{"version":3,"sources":["/home/archon/Development/hotsauce-inventory/app/src/client/src/components/IngredientTable.js"],"names":["React","Component","IngredientAutoSuggest","Grid","Row","Col","api","uuid","styled","Button","button","attrs","className","InputText","input","IngredientTable","constructor","componentDidMount","id","props","batchId","batch","getBatchById","batchIngredients","data","ingredients","i","length","name","ingredient","setState","rows","addRow","event","state","push","quantity","removeRow","elementId","target","parentNode","matchingRow","find","index","indexOf","splice","onIngredientsChange","handleChangeIngredientName","newIngredient","type","handleChangeIngredientQuantity","value","render","map","r"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport IngredientAutoSuggest from '../components/IngredientAutoSuggest'\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport api from '../api'\nimport uuid from 'react-uuid'\n\nimport styled from 'styled-components'\n\nconst Button = styled.button.attrs({\n    className: `btn btn-secondary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nclass IngredientTable extends React.Component {\n    constructor() {\n      super();\n  \n      this.state = {\n        rows: [ { id: uuid(), ingredient: '', quantity: '' } ]\n      };\n    }\n\n    componentDidMount = async () => {        \n        const id = this.props.batchId\n        var batch = await api.getBatchById(id)\n        \n        //Convert object (ingredient / name swap)\n        var batchIngredients = batch.data.data.ingredients\n        var i;\n        for(i = 0; i < batchIngredients.length; i++){\n            batchIngredients[i].name = batchIngredients[i]['ingredient'];\n            delete batchIngredients[i].ingredient;\n        }\n\n        this.setState({\n            rows: batchIngredients\n        })\n    }\n\n    addRow = async event => {\n        var rows = this.state.rows\n        rows.push( { id: uuid(), ingredient: '', quantity: '' } )\n        this.setState({rows: rows})\n    }\n\n    removeRow = async event => {\n        const elementId = event.target.parentNode.id\n\n        var rows = this.state.rows\n        var matchingRow = rows.find( ({ id }) => id === elementId );\n        const index = rows.indexOf(matchingRow);\n        if (index > -1) {\n            rows.splice(index, 1);\n        }\n      \n        this.setState({rows: rows})\n        this.props.onIngredientsChange(rows)\n    }\n\n    handleChangeIngredientName = async (event, newIngredient) => {\n        const elementId = event.target.type == \"text\" ? event.target.parentNode.parentNode.id : event.target.parentNode.parentNode.parentNode.parentNode.parentNode.id\n\n        var rows = this.state.rows\n        var matchingRow = rows.find( ({ id }) => id === elementId );\n        if(matchingRow){\n            matchingRow.ingredient = newIngredient\n        }\n        this.setState({rows: rows})\n        this.props.onIngredientsChange(rows)\n    }\n\n    handleChangeIngredientQuantity = async (event) => {\n        const elementId = event.target.parentNode.id\n\n        var rows = this.state.rows\n        var matchingRow = rows.find( ({ id }) => id === elementId );\n        matchingRow.quantity = event.target.value\n\n        this.setState({rows: rows})\n        this.props.onIngredientsChange(rows)\n    }\n  \n    render() {\n        return (\n            <div>\n                <table>\n                    {this.state.rows.map((r) => (\n                      <tr>\n                          <td id={r.id}> <IngredientAutoSuggest value={r.name} onIngredientChange={this.handleChangeIngredientName}/> </td>\n                          <td id={r.id}> <InputText id={r.id} type=\"text\" value={r.quantity} placeholder='Qty' onChange={this.handleChangeIngredientQuantity}></InputText> </td>\n                          <td id={r.id}> <button class=\"btn\" onClick={this.removeRow}>💣</button> </td>\n                      </tr>\n                    ))}\n                </table>\n                <Button onClick={this.addRow} >Add Ingredient</Button>\n            </div>\n        );\n    }\n  }\n\nexport default IngredientTable"]},"metadata":{},"sourceType":"module"}