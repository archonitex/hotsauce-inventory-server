{"ast":null,"code":"var _jsxFileName = \"/home/archon/Development/hotsauce-inventory/app/src/client/src/components/IngredientTable.js\";\nimport React, { Component } from 'react';\nimport IngredientAutoSuggest from '../components/IngredientAutoSuggest';\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport api from '../api';\nimport uuid from 'react-uuid';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Button = styled.button.attrs({\n  className: `btn btn-secondary`\n})`\n    margin: 15px 15px 15px 5px;\n`;\n_c = Button;\nconst InputText = styled.input.attrs({\n  className: 'form-control'\n})`\n    margin: 5px;\n`;\n_c2 = InputText;\n\nclass IngredientTable extends React.Component {\n  constructor() {\n    super();\n\n    this.componentDidMount = async () => {\n      const id = this.props.batchId;\n      var batch = await api.getBatchById(id); //Convert _id to id\n\n      var batchIngredients = batch.data.data.ingredients;\n      var i;\n\n      for (i = 0; i < batchIngredients.length; i++) {\n        batchIngredients[i].id = batchIngredients[i]['_id'];\n        delete batchIngredients[i]._id;\n      }\n\n      this.setState({\n        rows: batchIngredients\n      });\n      this.props.onIngredientsChange(batchIngredients);\n    };\n\n    this.addRow = async event => {\n      var rows = this.state.rows;\n      rows.push({\n        id: uuid(),\n        ingredient: '',\n        quantity: ''\n      });\n      this.setState({\n        rows: rows\n      });\n    };\n\n    this.removeRow = async event => {\n      const elementId = event.target.parentNode.id;\n      var rows = this.state.rows;\n      var matchingRow = rows.find(({\n        id\n      }) => id === elementId);\n      const index = rows.indexOf(matchingRow);\n\n      if (index > -1) {\n        rows.splice(index, 1);\n      }\n\n      this.setState({\n        rows: rows\n      });\n      this.props.onIngredientsChange(rows);\n    };\n\n    this.handleChangeIngredientName = async (event, newIngredient, ingredientId) => {\n      var rows = this.state.rows;\n      var matchingRow = rows.find(({\n        id\n      }) => id === ingredientId);\n\n      if (matchingRow) {\n        matchingRow.ingredient = newIngredient;\n      }\n\n      this.setState({\n        rows: rows\n      });\n      this.props.onIngredientsChange(rows);\n    };\n\n    this.handleChangeIngredientQuantity = async event => {\n      const elementId = event.target.parentNode.id;\n      var rows = this.state.rows;\n      var matchingRow = rows.find(({\n        id\n      }) => id === elementId);\n      matchingRow.quantity = event.target.value;\n      this.setState({\n        rows: rows\n      });\n      this.props.onIngredientsChange(rows);\n    };\n\n    this.state = {\n      rows: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        children: this.state.rows.map(r => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            id: r.id,\n            children: [\" \", /*#__PURE__*/_jsxDEV(IngredientAutoSuggest, {\n              id: r.id,\n              value: r.ingredient,\n              onIngredientChange: this.handleChangeIngredientName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 42\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            id: r.id,\n            children: [\" \", /*#__PURE__*/_jsxDEV(InputText, {\n              id: r.id,\n              type: \"text\",\n              value: r.quantity,\n              placeholder: \"Qty\",\n              onChange: this.handleChangeIngredientQuantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 42\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            id: r.id,\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn\",\n              onClick: this.removeRow,\n              children: \"\\uD83D\\uDCA3\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 42\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 27\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 23\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: this.addRow,\n        children: \"Add Ingredient\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default IngredientTable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"InputText\");","map":{"version":3,"sources":["/home/archon/Development/hotsauce-inventory/app/src/client/src/components/IngredientTable.js"],"names":["React","Component","IngredientAutoSuggest","Grid","Row","Col","api","uuid","styled","Button","button","attrs","className","InputText","input","IngredientTable","constructor","componentDidMount","id","props","batchId","batch","getBatchById","batchIngredients","data","ingredients","i","length","_id","setState","rows","onIngredientsChange","addRow","event","state","push","ingredient","quantity","removeRow","elementId","target","parentNode","matchingRow","find","index","indexOf","splice","handleChangeIngredientName","newIngredient","ingredientId","handleChangeIngredientQuantity","value","render","map","r"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport IngredientAutoSuggest from '../components/IngredientAutoSuggest'\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport api from '../api'\nimport uuid from 'react-uuid'\n\nimport styled from 'styled-components'\n\nconst Button = styled.button.attrs({\n    className: `btn btn-secondary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nclass IngredientTable extends React.Component {\n    constructor() {\n      super();\n  \n      this.state = {\n        rows: []\n      };\n    }\n\n    componentDidMount = async () => {        \n        const id = this.props.batchId\n        var batch = await api.getBatchById(id)\n        \n        //Convert _id to id\n        var batchIngredients = batch.data.data.ingredients\n        var i;\n        for(i = 0; i < batchIngredients.length; i++){\n            batchIngredients[i].id = batchIngredients[i]['_id'];\n            delete batchIngredients[i]._id;\n        }\n\n        this.setState({\n            rows: batchIngredients\n        })\n        this.props.onIngredientsChange(batchIngredients)\n    }\n\n    addRow = async event => {\n        var rows = this.state.rows\n        rows.push( { id: uuid(), ingredient: '', quantity: '' } )\n        this.setState({rows: rows})\n    }\n\n    removeRow = async event => {\n        const elementId = event.target.parentNode.id\n\n        var rows = this.state.rows\n        var matchingRow = rows.find( ({ id }) => id === elementId );\n        const index = rows.indexOf(matchingRow);\n        if (index > -1) {\n            rows.splice(index, 1);\n        }\n      \n        this.setState({rows: rows})\n        this.props.onIngredientsChange(rows)\n    }\n\n    handleChangeIngredientName = async (event, newIngredient, ingredientId) => {\n        var rows = this.state.rows\n        var matchingRow = rows.find( ({ id }) => id === ingredientId );\n        if(matchingRow){\n            matchingRow.ingredient = newIngredient\n        }\n        this.setState({rows: rows})\n        this.props.onIngredientsChange(rows)\n    }\n\n    handleChangeIngredientQuantity = async (event) => {\n        const elementId = event.target.parentNode.id\n\n        var rows = this.state.rows\n        var matchingRow = rows.find( ({ id }) => id === elementId );\n        matchingRow.quantity = event.target.value\n\n        this.setState({rows: rows})\n        this.props.onIngredientsChange(rows)\n    }\n  \n    render() {\n        return (\n            <div>\n                <table>\n                    {this.state.rows.map((r) => (\n                      <tr>\n                          <td id={r.id}> <IngredientAutoSuggest id={r.id} value={r.ingredient} onIngredientChange={this.handleChangeIngredientName}/> </td>\n                          <td id={r.id}> <InputText id={r.id} type=\"text\" value={r.quantity} placeholder='Qty' onChange={this.handleChangeIngredientQuantity}></InputText> </td>\n                          <td id={r.id}> <button class=\"btn\" onClick={this.removeRow}>💣</button> </td>\n                      </tr>\n                    ))}\n                </table>\n                <Button onClick={this.addRow} >Add Ingredient</Button>\n            </div>\n        );\n    }\n  }\n\nexport default IngredientTable"]},"metadata":{},"sourceType":"module"}