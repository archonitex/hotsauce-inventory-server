{"ast":null,"code":"var _jsxFileName = \"/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchInsert.jsx\";\nimport React, { Component } from 'react';\nimport DateInput from 'react-input-date';\nimport api from '../api';\nimport Moment from 'react-moment';\nimport moment from 'moment';\nimport Collapsible from 'react-collapsible';\nimport IngreditTable from '../components/IngredientTable';\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport ReactSlider from 'react-slider';\nimport styled from 'styled-components';\nimport IngredientTable from '../components/IngredientTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Title = styled.h2.attrs({\n  className: 'h2'\n})``;\nconst Wrapper = styled.div.attrs({\n  className: 'form-group'\n})`\n    margin: 0 30px;\n`;\n_c = Wrapper;\nconst Label = styled.label`\n    margin: 5px;\n`;\nconst InputText = styled.input.attrs({\n  className: 'form-control'\n})`\n    margin: 5px;\n`;\n_c2 = InputText;\nconst Button = styled.button.attrs({\n  className: `btn btn-primary`\n})`\n    margin: 15px 15px 15px 5px;\n`;\n_c3 = Button;\nconst CancelButton = styled.a.attrs({\n  className: `btn btn-danger`\n})`\n    margin: 15px 15px 15px 5px;\n`;\nconst StyledSlider = styled(ReactSlider)`\n    width: 100%;\n    height: 25px;\n`;\nconst StyledThumb = styled.div`\n    height: 25px;\n    line-height: 25px;\n    width: 25px;\n    text-align: center;\n    background-color: #000;\n    color: #fff;\n    border-radius: 50%;\n    cursor: grab;\n`;\n_c4 = StyledThumb;\n\nconst Thumb = (props, state) => /*#__PURE__*/_jsxDEV(StyledThumb, { ...props,\n  children: state.valueNow\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 62,\n  columnNumber: 33\n}, this);\n\n_c5 = Thumb;\nconst StyledTrack = styled.div`\n    top: 0;\n    bottom: 0;\n    background: ${props => props.index === 2 ? '#f00' : props.index === 1 ? '#0f0' : '#900'};\n    border-radius: 999px;\n`;\n_c6 = StyledTrack;\n\nconst Track = (props, state) => /*#__PURE__*/_jsxDEV(StyledTrack, { ...props,\n  index: state.index\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 71,\n  columnNumber: 33\n}, this);\n\n_c7 = Track;\n\nclass BatchInsert extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangeInputName = async event => {\n      const name = event.target.value;\n      this.setState({\n        name\n      });\n    };\n\n    this.handleChangeInputDate = newDate => {\n      this.setState({\n        date: newDate\n      });\n    };\n\n    this.handleChangeIngredients = async ingredientsList => {\n      this.setState({\n        ingredients: ingredientsList\n      });\n    };\n\n    this.handleIncludeBatch = async () => {\n      const {\n        name,\n        date,\n        ingredients\n      } = this.state;\n      const payload = {\n        name,\n        date,\n        ingredients\n      };\n      await api.insertBatch(payload).then(res => {\n        window.location.reload();\n      }); //Insert Ingredients. API filters what is needed or not\n\n      var ingredientsPayload = ingredients.map(ingredient => ({\n        name: ingredient.ingredient\n      }));\n      ingredientsPayload.forEach(async function (iPayload) {\n        api.insertIngredient(iPayload).then(res => {});\n      });\n    };\n\n    this.handleKeyDown = e => {\n      if (e.key === 'Enter') {\n        this.handleIncludeBatch();\n      }\n    };\n\n    var now = new Date();\n    var dateString = moment(now).format('DD-MM-YYYY');\n    this.state = {\n      name: '',\n      date: dateString,\n      ingredients: []\n    };\n  }\n\n  render() {\n    const {\n      name,\n      date\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Collapsible, {\n        trigger: \"Create Batch\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Batch Information\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: [/*#__PURE__*/_jsxDEV(Col, {\n              xs: 5,\n              children: /*#__PURE__*/_jsxDEV(InputText, {\n                type: \"text\",\n                placeholder: \"Batch name\",\n                value: name,\n                onChange: this.handleChangeInputName,\n                onKeyDown: this.handleKeyDown\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 131,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Col, {\n              xs: 5,\n              xsOffset: 2,\n              children: /*#__PURE__*/_jsxDEV(DateInput, {\n                date: date,\n                format: \"DDMMYYYY\",\n                separator: \"-\",\n                onChange: this.handleChangeInputDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Heat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              xs: 5,\n              children: /*#__PURE__*/_jsxDEV(ReactSlider, {\n                className: \"horizontal-slider\",\n                renderTrack: Track,\n                renderThumb: Thumb\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Ingredients\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(IngredientTable, {\n                onIngredientsChange: this.handleChangeIngredients\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            children: /*#__PURE__*/_jsxDEV(Col, {\n              xs: 2,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: this.handleIncludeBatch,\n                children: \"Create\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default BatchInsert;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"InputText\");\n$RefreshReg$(_c3, \"Button\");\n$RefreshReg$(_c4, \"StyledThumb\");\n$RefreshReg$(_c5, \"Thumb\");\n$RefreshReg$(_c6, \"StyledTrack\");\n$RefreshReg$(_c7, \"Track\");","map":{"version":3,"sources":["/home/archon/Development/hotsauce-inventory/app/src/client/src/pages/BatchInsert.jsx"],"names":["React","Component","DateInput","api","Moment","moment","Collapsible","IngreditTable","Grid","Row","Col","ReactSlider","styled","IngredientTable","Title","h2","attrs","className","Wrapper","div","Label","label","InputText","input","Button","button","CancelButton","a","StyledSlider","StyledThumb","Thumb","props","state","valueNow","StyledTrack","index","Track","BatchInsert","constructor","handleChangeInputName","event","name","target","value","setState","handleChangeInputDate","newDate","date","handleChangeIngredients","ingredientsList","ingredients","handleIncludeBatch","payload","insertBatch","then","res","window","location","reload","ingredientsPayload","map","ingredient","forEach","iPayload","insertIngredient","handleKeyDown","e","key","now","Date","dateString","format","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport DateInput from 'react-input-date'\nimport api from '../api'\nimport Moment from 'react-moment'\nimport moment from 'moment';\nimport Collapsible from 'react-collapsible';\nimport IngreditTable from '../components/IngredientTable'\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport ReactSlider from 'react-slider'\n\nimport styled from 'styled-components'\nimport IngredientTable from '../components/IngredientTable';\n\nconst Title = styled.h2.attrs({\n    className: 'h2',\n})``\n\nconst Wrapper = styled.div.attrs({\n    className: 'form-group',\n})`\n    margin: 0 30px;\n`\n\nconst Label = styled.label`\n    margin: 5px;\n`\n\nconst InputText = styled.input.attrs({\n    className: 'form-control',\n})`\n    margin: 5px;\n`\n\nconst Button = styled.button.attrs({\n    className: `btn btn-primary`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst CancelButton = styled.a.attrs({\n    className: `btn btn-danger`,\n})`\n    margin: 15px 15px 15px 5px;\n`\n\nconst StyledSlider = styled(ReactSlider)`\n    width: 100%;\n    height: 25px;\n`;\n\nconst StyledThumb = styled.div`\n    height: 25px;\n    line-height: 25px;\n    width: 25px;\n    text-align: center;\n    background-color: #000;\n    color: #fff;\n    border-radius: 50%;\n    cursor: grab;\n`;\n\nconst Thumb = (props, state) => <StyledThumb {...props}>{state.valueNow}</StyledThumb>;\n\nconst StyledTrack = styled.div`\n    top: 0;\n    bottom: 0;\n    background: ${props => props.index === 2 ? '#f00' : props.index === 1 ? '#0f0' : '#900'};\n    border-radius: 999px;\n`;\n\nconst Track = (props, state) => <StyledTrack {...props} index={state.index} />;\n\nclass BatchInsert extends Component {\n    constructor(props) {\n        super(props)\n\n        var now = new Date();\n\t\tvar dateString = moment(now).format('DD-MM-YYYY');\n\n        this.state = {\n            name: '',\n            date: dateString,\n            ingredients: []\n        }\n    }\n\n    handleChangeInputName = async event => {\n        const name = event.target.value\n        this.setState({ name })\n    }\n\n    handleChangeInputDate = (newDate) => {\n        this.setState({ date: newDate })\n    }\n\n    handleChangeIngredients = async ingredientsList => {\n        this.setState({ ingredients: ingredientsList })\n    }\n\n    handleIncludeBatch = async () => {\n        const { name, date, ingredients } = this.state\n        const payload = { name, date, ingredients }\n\n        await api.insertBatch(payload).then(res => {\n            window.location.reload();\n        })\n\n        //Insert Ingredients. API filters what is needed or not\n        var ingredientsPayload = ingredients.map(ingredient => ({ name: ingredient.ingredient }));\n\n        ingredientsPayload.forEach(async function(iPayload) {\n            api.insertIngredient(iPayload).then(res => {})\n        })\n    }\n\n    handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            this.handleIncludeBatch()\n        }\n    }\n\n    render() {\n        const { name, date } = this.state\n        return (\n            <Wrapper>\n                <Collapsible trigger=\"Create Batch\">\n                    <Grid>\n                        <h5>Batch Information</h5>\n                        <Row>\n                            <Col xs={5} >\n                                <InputText\n                                    type=\"text\"\n                                    placeholder=\"Batch name\"\n                                    value={name}\n                                    onChange={this.handleChangeInputName}\n                                    onKeyDown={this.handleKeyDown}\n                                />\n                            </Col>\n                            <Col xs={5} xsOffset={2} >\n                                <DateInput\n                                    date={date}\n                                    format='DDMMYYYY'\n                                    separator='-'\n                                    onChange={this.handleChangeInputDate}\n                                />\n                            </Col>\n                        </Row>\n                        <p></p>\n                        <h5>Heat</h5>\n                        <Row>                            \n                            <Col xs={5} >\n                                <ReactSlider\n                                    className=\"horizontal-slider\"\n                                    renderTrack={Track}\n                                    renderThumb={Thumb}\n                                />\n                            </Col>\n                        </Row>\n                    </Grid>\n\n                    <Grid>\n                        <p></p>\n                        <h5>Ingredients</h5>\n                        <Row>\n                            <Col xs={6} >\n                                <IngredientTable onIngredientsChange={this.handleChangeIngredients}/>\n                            </Col>\n                        </Row>                        \n                    </Grid>\n                    \n                    <Grid>\n                        <Row>\n                        <Col xs={2} >\n                            <Button onClick={this.handleIncludeBatch} >Create</Button>\n                        </Col>\n                        </Row>\n                    </Grid>\n\n                </Collapsible>\n\n                <p></p>\n\n            </Wrapper>\n        )\n    }\n}\n\nexport default BatchInsert"]},"metadata":{},"sourceType":"module"}