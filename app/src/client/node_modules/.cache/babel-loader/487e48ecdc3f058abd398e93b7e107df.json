{"ast":null,"code":"var _jsxFileName = \"/home/archon/Development/hotsauce-inventory/app/src/client/src/components/IngredientAutoSuggest.jsx\";\nimport React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport api from '../api'; // When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getSuggestionValue = suggestion => suggestion.name; // Use your imagination to render suggestions.\n\n\nconst renderSuggestion = suggestion => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: suggestion.name\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 3\n}, this);\n\nclass IngredientAutoSuggest extends React.Component {\n  constructor() {\n    super(); // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n\n    this.componentDidMount = async () => {\n      this.setState({\n        isLoading: true,\n        value: this.props.value || '',\n        id: this.props.id\n      });\n      debugger;\n      await api.getIngredients().then(ingredients => {\n        this.setState({\n          ingredients: ingredients.data.data || [],\n          isLoading: false\n        });\n      });\n    };\n\n    this.onChange = (event, {\n      newValue\n    }) => {\n      this.setState({\n        value: newValue\n      }); //HERE\n\n      this.props.onIngredientChange(event, newValue, '');\n    };\n\n    this.getSuggestions = value => {\n      const inputValue = value.trim().toLowerCase();\n      const inputLength = inputValue.length;\n      return inputLength === 0 ? [] : this.state.ingredients.filter(ingredient => ingredient.name.toLowerCase().includes(inputValue));\n    };\n\n    this.onSuggestionsFetchRequested = ({\n      value\n    }) => {\n      this.setState({\n        suggestions: this.getSuggestions(value)\n      });\n    };\n\n    this.onSuggestionsClearRequested = () => {\n      this.setState({\n        suggestions: []\n      });\n    };\n\n    this.state = {\n      id: '',\n      value: '',\n      ingredients: [],\n      suggestions: [],\n      isLoading: false\n    };\n  }\n\n  render() {\n    const {\n      value,\n      suggestions\n    } = this.state; // Autosuggest will pass through all these props to the input.\n\n    const inputProps = {\n      placeholder: 'Ingredient name',\n      value,\n      onChange: this.onChange\n    }; // Finally, render it!\n\n    return /*#__PURE__*/_jsxDEV(Autosuggest, {\n      suggestions: suggestions,\n      onSuggestionsFetchRequested: this.onSuggestionsFetchRequested,\n      onSuggestionsClearRequested: this.onSuggestionsClearRequested,\n      getSuggestionValue: getSuggestionValue,\n      renderSuggestion: renderSuggestion,\n      inputProps: inputProps\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default IngredientAutoSuggest;","map":{"version":3,"sources":["/home/archon/Development/hotsauce-inventory/app/src/client/src/components/IngredientAutoSuggest.jsx"],"names":["React","Autosuggest","api","getSuggestionValue","suggestion","name","renderSuggestion","IngredientAutoSuggest","Component","constructor","componentDidMount","setState","isLoading","value","props","id","getIngredients","then","ingredients","data","onChange","event","newValue","onIngredientChange","getSuggestions","inputValue","trim","toLowerCase","inputLength","length","state","filter","ingredient","includes","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","render","inputProps","placeholder"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport api from '../api'\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => (\n  <div>\n    {suggestion.name}\n  </div>\n);\n\nclass IngredientAutoSuggest extends React.Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      id: '',\n      value: '',\n      ingredients: [],\n      suggestions: [],\n      isLoading: false,\n    };\n  }\n\n  componentDidMount = async () => {\n    this.setState({ isLoading: true, value: this.props.value || '', id: this.props.id })\n\n    debugger;\n\n    await api.getIngredients().then(ingredients => {\n        this.setState({\n            ingredients: ingredients.data.data || [],\n            isLoading: false,\n        })\n    })\n  }\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n\n    //HERE\n\n    this.props.onIngredientChange(event, newValue, '')\n  };\n\n  getSuggestions = value => {\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n  \n    return inputLength === 0 ? [] : this.state.ingredients.filter(ingredient =>\n      ingredient.name.toLowerCase().includes(inputValue)\n    );\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  render() {\n    const { value, suggestions } = this.state;\n\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Ingredient name',\n      value,\n      onChange: this.onChange\n    };\n\n    // Finally, render it!\n    return (\n      <Autosuggest\n        suggestions={suggestions}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default IngredientAutoSuggest"]},"metadata":{},"sourceType":"module"}